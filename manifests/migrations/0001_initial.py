# Generated by Django 4.1.1 on 2022-11-29 21:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Capability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("capability", models.CharField(max_length=30)),
            ],
            options={
                "verbose_name_plural": "Capabilities",
            },
        ),
        migrations.CreateModel(
            name="Compute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, default="", max_length=30)),
                (
                    "serial_no",
                    models.CharField(
                        blank=True, default="<MAC ADDRESS>", max_length=30
                    ),
                ),
                (
                    "zone",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("core", "core"),
                            ("agent", "agent"),
                            ("detector", "detector"),
                        ],
                        max_length=30,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Compute",
            },
        ),
        migrations.CreateModel(
            name="Hardware",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hardware", models.CharField(max_length=30)),
                ("hw_model", models.CharField(blank=True, max_length=30)),
                ("hw_version", models.CharField(blank=True, max_length=30)),
                ("sw_version", models.CharField(blank=True, max_length=30)),
                (
                    "datasheet",
                    models.CharField(blank=True, default="<url>", max_length=30),
                ),
                ("cpu", models.CharField(blank=True, max_length=30)),
                ("cpu_ram", models.CharField(blank=True, max_length=30)),
                ("gpu_ram", models.CharField(blank=True, max_length=30)),
                ("shared_ram", models.BooleanField(blank=True, default=False)),
                (
                    "capabilities",
                    models.ManyToManyField(blank=True, to="manifests.capability"),
                ),
            ],
            options={
                "verbose_name_plural": "Hardware",
            },
        ),
        migrations.CreateModel(
            name="Label",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="NodeData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vsn",
                    models.CharField(max_length=30, unique="True", verbose_name="VSN"),
                ),
                ("name", models.CharField(max_length=30)),
                (
                    "gps_lat",
                    models.FloatField(blank=True, null=True, verbose_name="Latitude"),
                ),
                (
                    "gps_lon",
                    models.FloatField(blank=True, null=True, verbose_name="Longitude"),
                ),
                (
                    "computes",
                    models.ManyToManyField(
                        related_name="computes",
                        through="manifests.Compute",
                        to="manifests.hardware",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Nodes",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tag", models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=30)),
                (
                    "hardware",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="manifests.hardware",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="manifests.nodedata",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NodeSensor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=30)),
                (
                    "scope",
                    models.CharField(blank=True, default="global", max_length=30),
                ),
                (
                    "hardware",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="manifests.hardware",
                    ),
                ),
                ("labels", models.ManyToManyField(blank=True, to="manifests.label")),
                (
                    "node",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="manifests.nodedata",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="nodedata",
            name="resources",
            field=models.ManyToManyField(
                related_name="resources",
                through="manifests.Resource",
                to="manifests.hardware",
            ),
        ),
        migrations.AddField(
            model_name="nodedata",
            name="tags",
            field=models.ManyToManyField(blank=True, to="manifests.tag"),
        ),
        migrations.CreateModel(
            name="ComputeSensor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=30)),
                (
                    "hardware",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="manifests.hardware",
                    ),
                ),
                ("labels", models.ManyToManyField(blank=True, to="manifests.label")),
                (
                    "scope",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="manifests.compute",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="compute",
            name="hardware",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="manifests.hardware",
            ),
        ),
        migrations.AddField(
            model_name="compute",
            name="node",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="manifests.nodedata",
            ),
        ),
    ]
