# Generated by Django 4.1.1 on 2022-10-17 14:02

import app.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("organization", models.CharField(blank=True, max_length=255)),
                ("bio", models.TextField(blank=True)),
                (
                    "ssh_public_keys",
                    models.TextField(
                        blank=True,
                        validators=[app.models.validate_ssh_public_key_list],
                        verbose_name="SSH public keys",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Node",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vsn",
                    models.CharField(max_length=10, unique=True, verbose_name="VSN"),
                ),
                (
                    "mac",
                    models.CharField(
                        blank=True,
                        max_length=16,
                        null=True,
                        unique=True,
                        verbose_name="MAC",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NodeMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "can_schedule",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether node allows scheduling.",
                        verbose_name="Schedule?",
                    ),
                ),
                (
                    "can_develop",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether node allows developer access.",
                        verbose_name="Develop?",
                    ),
                ),
                (
                    "can_access_files",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether node allows file access.",
                        verbose_name="Files?",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.node"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "nodes",
                    models.ManyToManyField(through="app.NodeMembership", to="app.node"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "can_schedule",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether user can schedule.",
                        verbose_name="Schedule?",
                    ),
                ),
                (
                    "can_develop",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether user has developer access.",
                        verbose_name="Develop?",
                    ),
                ),
                (
                    "can_access_files",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether user has file access.",
                        verbose_name="Files?",
                    ),
                ),
                (
                    "allow_view",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether user has view access to project.",
                        verbose_name="View?",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.project"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="project",
            name="users",
            field=models.ManyToManyField(
                through="app.UserMembership", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="nodemembership",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.project"
            ),
        ),
    ]
